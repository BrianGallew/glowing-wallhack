#! /usr/bin/env python
"""
Reads commands from a file, running them in parallel.

Based on the Python script template at
https://github.com/BrianGallew/script_templates/blob/master/template.py
"""

import logging
# Requires Python 2.7 or better
import argparse

import sys
import os
import multiprocessing.dummy as multiprocessing
import time
import subprocess

STREAM = sys.stdout
BAR_TEMPLATE = '%s[%s%s] %i/%i - %s\r'
ETA_INTERVAL = 1
ETA_SMA_WINDOW = 9


class MyBar(object):
    location = -1

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.done()
        return False  # we're not suppressing exceptions

    def __init__(self, label='', expected_size=None):
        self.lines, self.cols = [
            int(x) for x in subprocess.check_output(['stty', 'size']).split()]
        self._escape('2J')
        self._escape('1;%dr' % (self.lines - 2))  # set scroll region
        self._escape('%d;1H' % (self.lines - 2))
        self.label = label
        self.width = self.cols - \
            len(BAR_TEMPLATE) - len(label) - 1 - (2 * len(str(expected_size)))
        self.empty_char = ' '
        self.filled_char = '#'
        self.expected_size = expected_size
        self.every = 1
        self.start = time.time()
        self.ittimes = []
        self.eta = 0
        self.etadelta = time.time()
        self.etadisp = self.format_time(self.eta)
        self.last_progress = 0

    def show(self, *_):
        if self.expected_size is None:
            raise Exception("expected_size not initialized")
        self.location += 1
        self.last_progress = self.location
        if (time.time() - self.etadelta) > ETA_INTERVAL:
            self.etadelta = time.time()
            self.ittimes = \
                self.ittimes[-ETA_SMA_WINDOW:] + \
                [-(self.start - time.time()) / (self.location + 1)]
            self.eta = \
                sum(self.ittimes) / float(len(self.ittimes)) * \
                (self.expected_size - self.location)
            self.etadisp = self.format_time(self.eta)
        x = int(self.width * self.location / self.expected_size)

        if ((self.location % self.every) == 0 or      # True every "every" updates
                (self.location == self.expected_size)):   # And when we're done
            self._escape('s')
            self._escape('%d;0H' % self.lines)
            STREAM.write(BAR_TEMPLATE % (
                self.label, self.filled_char * x,
                self.empty_char * (self.width - x), self.location,
                self.expected_size, self.etadisp))
            self._escape('%d;0H' % (self.lines - 2))
            STREAM.flush()
        self._escape('u')

    def __del__(self):
        self._escape('0;%dr' % self.lines)  # reset scroll region
        return

    def _escape(self, stuff):
        STREAM.write('''[''')
        STREAM.write(stuff)
        return STREAM.flush()

    def done(self):
        self.elapsed = time.time() - self.start
        elapsed_disp = self.format_time(self.elapsed)
        # Print completed bar with elapsed time
        STREAM.write(BAR_TEMPLATE % (
            self.label, self.filled_char * self.width,
            self.empty_char * 0, self.last_progress,
            self.expected_size, elapsed_disp))
        STREAM.write('\n')
        STREAM.flush()

    def format_time(self, seconds):
        return time.strftime('%H:%M:%S', time.gmtime(seconds))


def read_and_execute(option_group):
    '''read from the file object in option_group and execute the commands. 
    '''
    data = option_group.input.read().split('\n')
    my_pool = multiprocessing.Pool(option_group.parallel)
    progress_bar = MyBar('status', len(data))

    def runner(cmnd):
        os.system(cmnd)
        progress_bar.show()
    my_pool.map_async(runner, data)
    progress_bar.show()
    my_pool.close()
    my_pool.join()


def setup_logging(option_group):
    """Sets up logging in a syslog format by log level
    :param option_group: options as returned by the OptionParser
    """
    stderr_log_format = "%(levelname) -8s %(asctime)s %(funcName)s line:%(lineno)d: %(message)s"
    file_log_format = "%(asctime)s - %(levelname)s - %(message)s"
    logger = logging.getLogger()
    if option_group.debug:
        logger.setLevel(level=logging.DEBUG)
    elif option_group.verbose:
        logger.setLevel(level=logging.INFO)
    else:
        logger.setLevel(level=logging.WARNING)

    handlers = []
    if option_group.syslog:
        handlers.append(logging.SyslogHandler(facility=option_group.syslog))
        # Use standard format here because timestamp and level will be added by
        # syslogd.
    if option_group.logfile:
        handlers.append(logging.FileHandler(option_group.logfile))
        handlers[0].setFormatter(logging.Formatter(file_log_format))
    if not handlers:
        handlers.append(logging.StreamHandler())
        handlers[0].setFormatter(logging.Formatter(stderr_log_format))
    for handler in handlers:
        logger.addHandler(handler)
    return


def main():
    """Primary entry point."""
    logging.debug('main')
    parser = argparse.ArgumentParser()
    # Standard logging options.
    parser.add_argument("-v", "--verbose", dest="verbose", action='store_true',
                        default=False, help="Verbose output")
    parser.add_argument("-d", "--debug", dest="debug", action='store_true',
                        default=False, help="Debugging output")
    parser.add_argument("--syslog", dest="syslog", metavar="FACILITY",
                        help="Send log messages to the syslog")
    parser.add_argument("--logfile", dest="logfile", metavar="FILENAME",
                        help="Send log messages to a file")
    # script-specific options here
    parser.add_argument("-P", "--parallel", dest="parallel", metavar="PARALLEL",
                        default=multiprocessing.cpu_count(), type=int,
                        help="How many to run one simultaneously (default: %(default)s)")
    parser.add_argument(dest="input", metavar="INFILE", nargs='?',
                        help="input filename (default: STDIN)")

    options = parser.parse_args()
    setup_logging(options)

    # Your code here.
    if options.input:
        options.input = open(options.input)
    else:
        options.input = sys.stdin

    read_and_execute(options)
    return


if __name__ == '__main__':
    main()
